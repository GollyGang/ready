<?xml version="1.0"?>
<VTKFile type="ImageData" version="0.1" byte_order="LittleEndian" compressor="vtkZLibDataCompressor">
  <RD format_version="4">

    <description>
      This is a model of auxin transport, see &lt;a href=&quot;http://www.pennybacker.net&quot;&gt;http://www.pennybacker.net&lt;/a&gt;
      
      Despite only having a single chemical a complex range of patterns is possible.
      
      In this simplified version the gradient term is not present but the core pattern-formation mechanism remains. This parameter
      map shows the parameter mu varying from -1 on the left to 5 on the right, and beta varying from -3 at the bottom to 3 at the top.
    </description>
    
    <rule name="phyllotaxis" type="kernel" neighborhood_type="vertex" neighborhood_range="1" neighborhood_weight="laplacian">
      <kernel number_of_chemicals="1" block_size_x="1" block_size_y="1" block_size_z="1">
__kernel void rd_compute(__global float *a_in,__global float *a_out)
{
    const int index_x = get_global_id(0);
    const int index_y = get_global_id(1);
    const int index_z = get_global_id(2);
    const int X = get_global_size(0);
    const int Y = get_global_size(1);
    const int Z = get_global_size(2);

	const int xm1 = max(0,index_x-1);
    const int ym1 = max(0,index_y-1);
    const int xp1 = min(X-1,index_x+1);
    const int yp1 = min(Y-1,index_y+1);
	const int xm2 = max(0,index_x-2);
    const int ym2 = max(0,index_y-2);
    const int xp2 = min(X-1,index_x+2);
    const int yp2 = min(Y-1,index_y+2);
    /*const int xm1 = ((index_x-1+X) &amp; (X-1)); // wrap (assumes X is a power of 2)
    const int xm2 = ((index_x-2+X) &amp; (X-1));
    const int xp1 = ((index_x+1) &amp; (X-1));
    const int xp2 = ((index_x+2) &amp; (X-1));
    const int ym1 = ((index_y-1+Y) &amp; (Y-1));
    const int ym2 = ((index_y-2+Y) &amp; (Y-1));
    const int yp1 = ((index_y+1) &amp; (Y-1));
    const int yp2 = ((index_y+2) &amp; (Y-1));*/
    const int index_here = X*(Y*index_z + index_y) + index_x;
    const int index_n =  X*(Y*index_z + ym1) + index_x;
    const int index_n2 =  X*(Y*index_z + ym2) + index_x;
    const int index_ne = X*(Y*index_z + ym1) + xp1;
    const int index_e =  X*(Y*index_z + index_y) + xp1;
    const int index_e2 =  X*(Y*index_z + index_y) + xp2;
    const int index_se = X*(Y*index_z + yp1) + xp1;
    const int index_s =  X*(Y*index_z + yp1) + index_x;
    const int index_s2 =  X*(Y*index_z + yp2) + index_x;
    const int index_sw = X*(Y*index_z + yp1) + xm1;
    const int index_w =  X*(Y*index_z + index_y) + xm1;
    const int index_w2 =  X*(Y*index_z + index_y) + xm2;
    const int index_nw = X*(Y*index_z + ym1) + xm1;
    float a = a_in[index_here];
    float a_n = a_in[index_n];
    float a_ne = a_in[index_ne];
    float a_e = a_in[index_e];
    float a_se = a_in[index_se];
    float a_s = a_in[index_s];
    float a_sw = a_in[index_sw];
    float a_w = a_in[index_w];
    float a_nw = a_in[index_nw];
    float a_n2 = a_in[index_n2];
    float a_e2 = a_in[index_e2];
    float a_s2 = a_in[index_s2];
    float a_w2 = a_in[index_w2];

    float timestep = 0.0005f;
    float h = 0.4f; // grid spacing
	
	float mu_min = -1.0f;
	float mu_max = 5.0f;
	float beta_min = -3.0f;
	float beta_max = 3.0f;
	float mu = mu_min + ( ( mu_max - mu_min ) * index_x ) / X;
	float beta = beta_min + ( ( beta_max - beta_min ) * index_y ) / Y;
    
    // 5-point stencil for the Laplacian: [ 0,1,0; 1,-4,1; 0,1,0 ] / (h*h)
    float laplacian = ( a_n + a_e + a_s + a_w - 4.0f * a ) / ( h * h );
    // 13-point stencil for the Bi-Laplacian: [ 0,0,1,0,0; 0,2,-8,2,0; 1,-8,20,-8,1; 0,2,-8,2,0; 0,0,1,0,0 ] / (h*h*h*h)
    float bilaplacian = ( a_n2 + a_e2 + a_s2 + a_w2 + 2.0f * ( a_ne + a_se + a_sw + a_nw ) 
                          - 8.0f * ( a_n + a_e + a_s + a_w ) + 20.0f * a ) / ( h * h * h * h );
    // 2-point stencil for the central difference: [-1,0,1] / (2*h)
    float x_gradient = ( a_w - a_e ) / ( 2.0f * h );
    float y_gradient = ( a_s - a_n ) / ( 2.0f * h );
    float gradient_mag_squared = pow( x_gradient, 2.0f ) + pow( y_gradient, 2.0f );

    float delta_a = mu * a - bilaplacian - 2.0f*laplacian - a + beta*a*a - a*a*a;

    a_out[index_here] = a + timestep * delta_a;
}

      </kernel>
      
    </rule>
    <initial_pattern_generator apply_when_loading="true">

      <overlay chemical="a"> <add /> <white_noise low="-0.1" high="0.1" /> <everywhere /> </overlay>

    </initial_pattern_generator>

    <render_settings>
      <low value="-0.5" />
      <high value="2.5" />
      <timesteps_per_render value="256" />
      <show_displacement_mapped_surface value="false" />
    </render_settings>
    
  </RD>
  <ImageData WholeExtent="0 511 0 511 0 0" Origin="0 0 0" Spacing="1 1 1">
  <Piece Extent="0 511 0 511 0 0">
    <PointData>
      <DataArray type="Float32" Name="a" format="binary" RangeMin="0" RangeMax="0">
        IAAAAACAAAAAAAAANAAAADQAAAA0AAAANAAAADQAAAA0AAAANAAAADQAAAA0AAAANAAAADQAAAA0AAAANAAAADQAAAA0AAAANAAAADQAAAA0AAAANAAAADQAAAA0AAAANAAAADQAAAA0AAAANAAAADQAAAA0AAAANAAAADQAAAA0AAAANAAAADQAAAA=eJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAF4nO3BAQEAAACAkP6v7ggKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiAAAABeJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAF4nO3BAQEAAACAkP6v7ggKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiAAAABeJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAF4nO3BAQEAAACAkP6v7ggKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiAAAABeJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAF4nO3BAQEAAACAkP6v7ggKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiAAAABeJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAF4nO3BAQEAAACAkP6v7ggKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiAAAABeJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAF4nO3BAQEAAACAkP6v7ggKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiAAAABeJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAF4nO3BAQEAAACAkP6v7ggKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiAAAABeJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAF4nO3BAQEAAACAkP6v7ggKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiAAAABeJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAF4nO3BAQEAAACAkP6v7ggKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiAAAABeJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAF4nO3BAQEAAACAkP6v7ggKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiAAAABeJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAE=
      </DataArray>
    </PointData>
    <CellData>
    </CellData>
  </Piece>
  </ImageData>
</VTKFile>

