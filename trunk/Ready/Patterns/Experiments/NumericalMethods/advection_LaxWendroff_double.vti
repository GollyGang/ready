<?xml version="1.0"?>
<VTKFile type="ImageData" version="0.1" byte_order="LittleEndian" compressor="vtkZLibDataCompressor">
  <RD format_version="4">
    <description>
        The advection equation: da/dt = -da/dx

        This is the Lax-Wendroff method. Intermediate results at half time steps and half grid spacing
        are combined.
    </description>
    <rule name="Advection" type="kernel" neighborhood_type="vertex" neighborhood_range="1" neighborhood_weight="laplacian">
      <kernel number_of_chemicals="1" block_size_x="1" block_size_y="1" block_size_z="1">

#ifdef cl_khr_fp64
    #pragma OPENCL EXTENSION cl_khr_fp64 : enable
#elif defined(cl_amd_fp64)
    #pragma OPENCL EXTENSION cl_amd_fp64 : enable
#else
    #error "Double precision floating point not supported on this OpenCL device. Choose another or contact the Ready team."
#endif

double midpointGradient( double a, double b, double dx ) {
    return ( b - a ) / dx;
}

// given two neighboring samples a,b each separated by dx what is the rate of change at the midpoint?
double delta( double a, double b, double dx ) {
    return - midpointGradient( a, b, dx ); // the advection equation: da/dt = -dx/dt
}

// http://apps.nrbook.com/empanel/index.html#pg=1040
double LaxWendroff( double a, double b, double c, double dx, double dt ) {
    // take a half step forwards at two positions midway between ab and bc
    double m1 = ( a + b ) / 2.0 + 0.5 * dt * delta( a, b, dx );
    double m2 = ( b + c ) / 2.0 + 0.5 * dt * delta( b, c, dx );
    // then the gradient from those positions is used from the start
    return b + dt * delta( m1, m2, dx );
}

__kernel void rd_compute(__global double *a_in,__global double *a_out)
{
    const int index_x = get_global_id(0);
    const int index_y = get_global_id(1);
    const int index_z = get_global_id(2);
    const int X = get_global_size(0);
    const int Y = get_global_size(1);
    const int Z = get_global_size(2);
    const int index_here = X*(Y*index_z + index_y) + index_x;

    const int xm1 = ((index_x-1+X) &amp; (X-1)); // wrap (assumes X is a power of 2)
    const int xp1 = ((index_x+1) &amp; (X-1));
    const int index_e =  X*(Y*index_z + index_y) + xp1;
    const int index_w =  X*(Y*index_z + index_y) + xm1;

    double dx = 0.1; // grid spacing
    double dt = 0.01; // timestep
    
    a_out[index_here] = LaxWendroff( a_in[ index_w ], a_in[ index_here ], a_in[ index_e ], dx, dt );
}
      </kernel>
      
    </rule>
    <initial_pattern_generator apply_when_loading="true">
      <overlay chemical="a">
        <overwrite>
          
        </overwrite>
        <gaussian height="1" sigma="0.05">
          <point3D x="0.5" y="0.5" z="0.5">
            
          </point3D>
          
        </gaussian>
        <everywhere>
          
        </everywhere>
        
      </overlay>
      
    </initial_pattern_generator>
    <render_settings>
      <surface_color r="1" g="1" b="1">
        
      </surface_color>
      <color_low r="0" g="0" b="1">
        
      </color_low>
      <color_high r="1" g="0" b="0">
        
      </color_high>
      <show_color_scale value="true">
        
      </show_color_scale>
      <show_multiple_chemicals value="true">
        
      </show_multiple_chemicals>
      <active_chemical value="a">
        
      </active_chemical>
      <low value="0">
        
      </low>
      <high value="1">
        
      </high>
      <vertical_scale_1D value="30">
        
      </vertical_scale_1D>
      <vertical_scale_2D value="15">
        
      </vertical_scale_2D>
      <contour_level value="0.25">
        
      </contour_level>
      <use_wireframe value="false">
        
      </use_wireframe>
      <show_cell_edges value="false">
        
      </show_cell_edges>
      <show_bounding_box value="true">
        
      </show_bounding_box>
      <slice_3D value="true">
        
      </slice_3D>
      <slice_3D_axis value="z">
        
      </slice_3D_axis>
      <slice_3D_position value="0.5">
        
      </slice_3D_position>
      <show_displacement_mapped_surface value="true">
        
      </show_displacement_mapped_surface>
      <color_displacement_mapped_surface value="true">
        
      </color_displacement_mapped_surface>
      <use_image_interpolation value="true">
        
      </use_image_interpolation>
      <timesteps_per_render value="8">
        
      </timesteps_per_render>
      <show_phase_plot value="false">
        
      </show_phase_plot>
      <phase_plot_x_axis value="a">
        
      </phase_plot_x_axis>
      <phase_plot_y_axis value="b">
        
      </phase_plot_y_axis>
      <phase_plot_z_axis value="c">
        
      </phase_plot_z_axis>
      
    </render_settings>
    
  </RD>
  <ImageData WholeExtent="0 255 0 0 0 0" Origin="0 0 0" Spacing="1 1 1">
  <Piece Extent="0 255 0 0 0 0">
    <PointData>
      <DataArray type="Float64" Name="a" format="binary" RangeMin="0" RangeMax="0">
        AQAAAACAAAAACAAAFwAAAA==eJxjYBgFo2AUjIJRMApGwUgDAAgAAAE=
      </DataArray>
    </PointData>
    <CellData>
    </CellData>
  </Piece>
  </ImageData>
</VTKFile>
