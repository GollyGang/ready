UI annoyances:
- edit formula dialog: want tab key to indent (doesn't work on Windows), want indent to be smart ideally
- never want dialogs to appear partially off-screen
- need some way to refresh the Patterns Pane, other than collapse/expand on the folders?
- can floating panes go behind main window?

Big picture issues:
- Dan Wills enquired whether could use readybase as a back-end engine to Houdini. In general this 
  could be an awesome way to reach more users - appear as a Houdini/Blender plugin, for example. 
  I've added "rdy", a command-line version of Ready, just to demonstrate the possibilities.
- Would love an Android version but OpenCL isn't supported. Renderscript Compute seems to be the 
  thing but kernels are compiled at build time, which isn't what we want. Could work as a pattern 
  viewer, allowing users to finger paint. NDK is another possibility. Maybe OpenGL ES, with a 
  shader - fits in with WebGL Playground idea below.
- Scripting support

before 0.5 release:

- add Help files for Info Panel, etc.?
- lots of patterns: Robert's, examples from File > New Pattern

- way to expand mesh grids where possible? by detecting mesh properties? could then implement wrap too
- progress indicator for mesh generators?
- document meaning of dimensions, especially for meshes
- way to save the pattern as blank, with apply_when_loading="true" - File > Save Advanced... ?
- way to switch between inbuilt, formula and kernel

- 3D images should show cell color when use_image_interpolation=false, to match behavior we like in
  meshes

- show neighborhood_type, neighborhood_range and neighborhood_weight in the Info Panel, even if 
  can't yet change them
  
- current color button should be replaced by spectrum slider plus value indicators?
- image import (user can specify how colors map onto chemicals), import Robert's patterns?
  (cool use: error-diffusion for binarizing grayscale: http://youtu.be/xoJDTPRqI6o)
- relax power of 2 size requirement (only a speed benefit)
- how to organise examples - folders by rule type? folders by intention (teaching, demo, CPU-only, scientific)?
- allow block size to be changed for formula rules on images
- add timesteps_per_render to action toolbar
- set scene rotating by a setting in the start recording dialog box, or for general use?
- mouse wheel sensitivity option

before 0.x release:
- toggle between single channel painting and multi-channel painting. Sometimes we want to paint just in channels
  a and b, though, for example, which is trickier.
- parameter map(s) in a separate window, to allow user to explore parameters (could just use extra 
  chemicals for this but want some kind of UI for zooming in and out of interesting areas, etc.)
- fix Mac bug: can't disable tooltips (bug is in wxOSX-Cocoa)
- improve wxHtmlWindow so selected text goes gray on loss of focus (Mac only?)
- allow user to change the default render settings
- multi-stage, multi-scale RD (McCabe, Kytta, Woitzel) 
- read Turk's CASCADE language, for freeze-and-continue schemes
- add initial_pattern_generator to Info Pane for editing
- export rule to the WebGL Playground template
- add orientation indicator, as in Paraview
- mesh relaxation & subdivision scheme for imported meshes (similar to Turk but can use VTK for this)
- simpler subdivide-until-equal-density scheme, to equalise cell area/volume (also to just subdivide)
- make tetrahedral mesh from input surface: scatter internal points then tetrahedralize
- 2D slices as slice through 3D volume (if available, else whole image) =>
  1D slice as line through 2D slice (if available, else whole image)
- implement suggested_running_speed (tu/s) instead of timesteps_per_render

before 1.0 release:
- use_image_interpolation=false should give city blocks in the displacement-mapped surface?
- lots of patterns in library (primary UI for beginners is a list of examples to click)
- copy/paste (2d only) (paste modes: add, overwrite)
- SSE for non-OpenCL implementations (will assume all target cpus support SSE)
- new overlay shape: scattered rectangles/circles (need some higher-level specifier for this?)
- graphical UI for editing the initial-pattern-generator overlay stack

future ideas:
- phase diagrams (plotting trajectories of individual locations through chemical space): keep track of
  a sample of points over time, allow the user to plot different pairs/triples
  (Ideally would use vtkDataObjectToTable->vtkChartXY but this doesn't currently support pipelining:
  http://www.vtk.org/Bug/view.php?id=13268)
- bug: allow user to change OpenCL platform and device while a pattern is running
- full control over scene graph, e.g. nodes+connections interface
- radiosity rendering for better visualization of tangled structures (embed a raytracer)
- STL output, email file to shapeways for printing
- discrete RD (simulation of individual chemicals, to compare with differential equations)
- display the evolution of a 1D pattern as a 2D image, with time as the second axis, as here:
  http://www.stephenwolfram.com/publications/recent/specialfunctions/images/Slide028_917x754.gif
- allow non-OpenCL implementations to load all files, by parsing formula
- integer systems
- read Golly rule tables
- new neighborhood type: WITHIN_RADIUS, as per http://groups.csail.mit.edu/mac/projects/amorphous/jsim/sim/GrayScott.html
- allow 3D view angle to be specified as a render setting

wanted patterns:
- bacterial colony: e.g. Modeling Spatio-Temporal Patterns Generated by Bacillus subtilis
- predator-prey (Lotka-Volterra)
- chemical models: Oregonator, Brusselator, Brandeisator, etc.

code annoyances:
- would prefer ImageRD to use named arrays internally, as in MeshRD
