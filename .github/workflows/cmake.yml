name: Build

on: pull_request

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  WXVERSION: 3.1.4

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-16.04, macos-10.15, windows-2019] #ubuntu-20.04, ubuntu-18.04, macos-11.0, windows-2019, windows-2016]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: Cache wxWidgets
      uses: actions/cache@v2
      env:
        cache-name: cache-wxWidgets
      with:
        path: wxWidgets-${{env.WXVERSION}}
        key: ${{ runner.os }}-build-${{ env.cache-name }}-2

    - name: Compile wxWidgets (for Windows)
      if: contains(matrix.os, 'windows')
      #uses: ilammy/msvc-dev-cmd@v1
      #with:
      #  arch: x86
      run: |
          if (Test-Path wxWidgets-${{env.WXVERSION}}) { echo "wxWidgets already present"} else {
             Invoke-WebRequest -Uri https://github.com/wxWidgets/wxWidgets/releases/download/v${{env.WXVERSION}}/wxWidgets-${{env.WXVERSION}}.zip -OutFile wxWidgets-${{env.WXVERSION}}.zip
             Expand-Archive -LiteralPath wxWidgets-${{env.WXVERSION}}.zip -DestinationPath wxWidgets-${{env.WXVERSION}}
             cd wxWidgets-${{env.WXVERSION}}/build/msw
             nmake -C -f makefile.vc BUILD=release RUNTIME_LIBS=static UNICODE=1 DEBUG_INFO=0 DEBUG_FLAG=0
          }

    - name: Install dependencies (for Windows)
      if: contains(matrix.os, 'windows')
      shell: pwsh
      run: |
        C:\msys64\usr\bin\wget.exe -q https://github.com/GollyGang/ready/releases/download/0.8/VTK-8.1.2_msvc14_x86_shared.7z
        7z x VTK-8.1.2_msvc14_x86_shared.7z
        echo $GITHUB_WORKSPACE
        echo ${{runner.workspace}}

    - name: Install dependencies (for Ubuntu 20.04 and 18.04)
      if: matrix.os == 'ubuntu-20.04' || matrix.os == 'ubuntu-18.04'
      run: |
        sudo apt-get update
        sudo apt-get install libvtk7-dev ocl-icd-opencl-dev libgtk-3-dev libwxgtk3.0-gtk3-dev

    - name: Install dependencies (for Ubuntu 16.04)
      if: matrix.os == 'ubuntu-16.04'
      run: |
        sudo apt-get update
        sudo apt-get install libvtk6-dev ocl-icd-opencl-dev libgtk2.0-dev libwxgtk3.0-dev

    - name: Install dependencies (for macOS)
      if: contains(matrix.os, 'macos')
      run: |
        brew install vtk wxmac
        echo "MACOS_QT5_HINT=$(brew --prefix qt5)" >> $GITHUB_ENV

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake (non-Windows)
      if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'ubuntu')
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_PREFIX_PATH=${{ env.MACOS_QT5_HINT }}

    - name: Configure CMake (Windows)
      if: contains(matrix.os, 'windows')
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        cmake $GITHUB_WORKSPACE -A Win32 -DVTK_DIR=$GITHUB_WORKSPACE/VTK/lib/cmake/vtk-8.1 -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_PREFIX_PATH=${{ env.MACOS_QT5_HINT }}

    - name: Build
      # Execute the build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE

    - name: Test (with OpenCL)
      if: contains(matrix.os, 'macos')
      # Run the full suite of tests if OpenCL is available
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: ctest -C $BUILD_TYPE

    - name: Test (without OpenCL)
      # Run a restricted suite of tests if OpenCL is not available
      if: contains(matrix.os, 'windows') || contains(matrix.os, 'ubuntu')
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: ctest -R rdy -C $BUILD_TYPE
