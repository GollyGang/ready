<?xml version="1.0"?>
<VTKFile type="ImageData" version="0.1" byte_order="LittleEndian" compressor="vtkZLibDataCompressor">
  <RD format_version="6">
    <description>
      A faster but more memory-intensive implementation of Jonathan McCabe&apos;s &quot;Cyclic Symmetric Multi-Scale Turing Patterns&quot;. Uses 2-pass 1D gaussian convolution to compute difference-of-gaussian laplacian neighborhoods instead of circular neighborhoods.

      Implemented by Cornus Ammonis.
    </description>
    <rule name="McCabe" type="kernel" neighborhood_type="vertex">
      <kernel number_of_chemicals="8" block_size_x="1" block_size_y="1" block_size_z="1">
                #define SQRT_2_PI 2.50662827463
#define STD_DEVS 3.0


float gaussian1d(__global float* in, float sigma, float devs, int x, int y, int X, int Y, bool vertical) {
    float a = 1.0f / (sigma * SQRT_2_PI);
    float d = 2.0f * sigma * sigma;
    int r = devs * sigma;
    float acc = 0.0f;
    if (vertical) {
        for (int i = -r; i &lt;= r; i++) {
            float isq = -1.0f * i * i;
            float g = a * exp( isq / d );
            int ty = (y+i+Y) &amp; (Y-1);
            acc += g * in[ X*ty + x ];
        }
    } else {
        for (int i = -r; i &lt;= r; i++) {
            float isq = -1.0f * i * i;
            float g = a * exp( isq / d );
            int tx = (x+i+X) &amp; (X-1);
            acc += g * in[ X*y + tx ];
        }
    }
    return acc;
}


__kernel void rd_compute(
__global float* a_in,
__global float* b_in,
__global float* c_in,
__global float* d_in,
__global float* e_in,
__global float* f_in,
__global float* g_in,
__global float* h_in,
__global float* a_out,
__global float* b_out,
__global float* c_out,
__global float* d_out,
__global float* e_out,
__global float* f_out,
__global float* g_out,
__global float* h_out
)
{
    #define NUM_SCALES 6
    #define NUM_RADII 7


    float radii[ NUM_RADII ] = { 92.0f, 48.0f, 24.0f, 12.0f, 6.0f, 3.0f, 1.0f };
    int pairs[ NUM_SCALES ][ 2 ] = { {1, 0}, {2, 1}, {3, 2}, {4, 3}, {5, 4}, {6, 5} }; // inner, outer indices into radii[]
    float amount[ NUM_SCALES ] = { 0.006f, 0.005f, 0.004f, 0.003f, 0.002f, 0.001f };


    const int bx = get_global_id(0);
    const int by = get_global_id(1);
    const int BX = get_global_size(0);
    const int BY = get_global_size(1);
    const int i_here = BX*by + bx;


    float densities[ NUM_RADII ];
    for( int i = 0; i &lt; NUM_RADII; i++ )
    {
        densities[ i ] = 0.0f;
    }


    // compute the density of every disk
    b_out[i_here] = gaussian1d(a_in, radii[ 0 ], STD_DEVS, bx, by, BX, BY, true);
    c_out[i_here] = gaussian1d(a_in, radii[ 1 ], STD_DEVS, bx, by, BX, BY, true);
    d_out[i_here] = gaussian1d(a_in, radii[ 2 ], STD_DEVS, bx, by, BX, BY, true);
    e_out[i_here] = gaussian1d(a_in, radii[ 3 ], STD_DEVS, bx, by, BX, BY, true);
    f_out[i_here] = gaussian1d(a_in, radii[ 4 ], STD_DEVS, bx, by, BX, BY, true);
    g_out[i_here] = gaussian1d(a_in, radii[ 5 ], STD_DEVS, bx, by, BX, BY, true);
    h_out[i_here] = gaussian1d(a_in, radii[ 6 ], STD_DEVS, bx, by, BX, BY, true);


    densities[ 0 ] = gaussian1d(b_in, radii[ 0 ], STD_DEVS, bx, by, BX, BY, false);
    densities[ 1 ] = gaussian1d(c_in, radii[ 1 ], STD_DEVS, bx, by, BX, BY, false);
    densities[ 2 ] = gaussian1d(d_in, radii[ 2 ], STD_DEVS, bx, by, BX, BY, false);
    densities[ 3 ] = gaussian1d(e_in, radii[ 3 ], STD_DEVS, bx, by, BX, BY, false);
    densities[ 4 ] = gaussian1d(f_in, radii[ 4 ], STD_DEVS, bx, by, BX, BY, false);
    densities[ 5 ] = gaussian1d(g_in, radii[ 5 ], STD_DEVS, bx, by, BX, BY, false);
    densities[ 6 ] = gaussian1d(h_in, radii[ 6 ], STD_DEVS, bx, by, BX, BY, false);


    // add variation on whichever scale has least
    float lowest_variation = 1e6f;
    float diff;
    for( int i = 0; i &lt; NUM_SCALES; i++ )
    {
        float density_difference = densities[ pairs[ i ][ 0 ] ] - densities[ pairs[ i ][ 1 ] ];
        float variation = fabs(density_difference);
        if( variation &lt; lowest_variation )
        {
            lowest_variation = variation;
            diff = sign( density_difference ) * amount[ i ];
        }
    }
    a_out[i_here] = clamp(a_in[i_here] + diff, -1.0f, 1.0f);


}
      </kernel>

    </rule>
    <initial_pattern_generator apply_when_loading="true">
      <overlay chemical="a">
        <overwrite>

        </overwrite>
        <white_noise low="-0.1" high="0.1">

        </white_noise>
        <everywhere>

        </everywhere>

      </overlay>

    </initial_pattern_generator>
    <render_settings>
      <surface_color r="1" g="1" b="1">

      </surface_color>
      <colormap value="HSV blend" />
      <color_low r="0" g="0" b="0">

      </color_low>
      <color_high r="1" g="1" b="1">

      </color_high>
      <show_color_scale value="false">

      </show_color_scale>
      <show_multiple_chemicals value="false">

      </show_multiple_chemicals>
      <active_chemical value="a">

      </active_chemical>
      <low value="-1">

      </low>
      <high value="1">

      </high>
      <vertical_scale_1D value="30">

      </vertical_scale_1D>
      <vertical_scale_2D value="15">

      </vertical_scale_2D>
      <contour_level value="0.25">

      </contour_level>
      <use_wireframe value="false">

      </use_wireframe>
      <show_cell_edges value="false">

      </show_cell_edges>
      <show_bounding_box value="true">

      </show_bounding_box>
      <slice_3D value="true">

      </slice_3D>
      <slice_3D_axis value="z">

      </slice_3D_axis>
      <slice_3D_position value="0.5">

      </slice_3D_position>
      <show_displacement_mapped_surface value="false">

      </show_displacement_mapped_surface>
      <color_displacement_mapped_surface value="true">

      </color_displacement_mapped_surface>
      <use_image_interpolation value="true">

      </use_image_interpolation>
      <timesteps_per_render value="8">

      </timesteps_per_render>
      <show_phase_plot value="false">

      </show_phase_plot>
      <phase_plot_x_axis value="a">

      </phase_plot_x_axis>
      <phase_plot_y_axis value="b">

      </phase_plot_y_axis>
      <phase_plot_z_axis value="c">

      </phase_plot_z_axis>

    </render_settings>

  </RD>
  <ImageData WholeExtent="0 255 0 255 0 0" Origin="0 0 0" Spacing="1 1 1">
  <Piece Extent="0 255 0 255 0 0">
    <PointData>
      <DataArray type="Float32" Name="a" format="binary" RangeMin="0" RangeMax="0">
        CAAAAACAAAAAAAAANAAAADQAAAA0AAAANAAAADQAAAA0AAAANAAAADQAAAA=eJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAF4nO3BAQEAAACAkP6v7ggKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiAAAABeJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAF4nO3BAQEAAACAkP6v7ggKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiAAAABeJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAE=
      </DataArray>
      <DataArray type="Float32" Name="b" format="binary" RangeMin="0" RangeMax="0">
        CAAAAACAAAAAAAAANAAAADQAAAA0AAAANAAAADQAAAA0AAAANAAAADQAAAA=eJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAF4nO3BAQEAAACAkP6v7ggKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiAAAABeJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAF4nO3BAQEAAACAkP6v7ggKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiAAAABeJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAE=
      </DataArray>
      <DataArray type="Float32" Name="c" format="binary" RangeMin="0" RangeMax="0">
        CAAAAACAAAAAAAAANAAAADQAAAA0AAAANAAAADQAAAA0AAAANAAAADQAAAA=eJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAF4nO3BAQEAAACAkP6v7ggKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiAAAABeJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAF4nO3BAQEAAACAkP6v7ggKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiAAAABeJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAE=
      </DataArray>
      <DataArray type="Float32" Name="d" format="binary" RangeMin="0" RangeMax="0">
        CAAAAACAAAAAAAAANAAAADQAAAA0AAAANAAAADQAAAA0AAAANAAAADQAAAA=eJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAF4nO3BAQEAAACAkP6v7ggKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiAAAABeJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAF4nO3BAQEAAACAkP6v7ggKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiAAAABeJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAE=
      </DataArray>
      <DataArray type="Float32" Name="e" format="binary" RangeMin="0" RangeMax="0">
        CAAAAACAAAAAAAAANAAAADQAAAA0AAAANAAAADQAAAA0AAAANAAAADQAAAA=eJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAF4nO3BAQEAAACAkP6v7ggKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiAAAABeJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAF4nO3BAQEAAACAkP6v7ggKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiAAAABeJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAE=
      </DataArray>
      <DataArray type="Float32" Name="f" format="binary" RangeMin="0" RangeMax="0">
        CAAAAACAAAAAAAAANAAAADQAAAA0AAAANAAAADQAAAA0AAAANAAAADQAAAA=eJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAF4nO3BAQEAAACAkP6v7ggKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiAAAABeJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAF4nO3BAQEAAACAkP6v7ggKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiAAAABeJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAE=
      </DataArray>
      <DataArray type="Float32" Name="g" format="binary" RangeMin="0" RangeMax="0">
        CAAAAACAAAAAAAAANAAAADQAAAA0AAAANAAAADQAAAA0AAAANAAAADQAAAA=eJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAF4nO3BAQEAAACAkP6v7ggKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiAAAABeJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAF4nO3BAQEAAACAkP6v7ggKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiAAAABeJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAE=
      </DataArray>
      <DataArray type="Float32" Name="h" format="binary" RangeMin="0" RangeMax="0">
        CAAAAACAAAAAAAAANAAAADQAAAA0AAAANAAAADQAAAA0AAAANAAAADQAAAA=eJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAF4nO3BAQEAAACAkP6v7ggKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiAAAABeJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAF4nO3BAQEAAACAkP6v7ggKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiAAAABeJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAE=
      </DataArray>
    </PointData>
    <CellData>
    </CellData>
  </Piece>
  </ImageData>
</VTKFile>
