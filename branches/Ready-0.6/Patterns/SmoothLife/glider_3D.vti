<?xml version="1.0"?>
<VTKFile type="ImageData" version="0.1" byte_order="LittleEndian" compressor="vtkZLibDataCompressor">
  <RD format_version="1">
  
    <description>
        SmoothLife, by Stephan Rafler.
        &lt;a href=&quot;http://arxiv.org/abs/1111.1567&quot;&gt;PDF&lt;/a&gt;,
        &lt;a href=&quot;http://sourceforge.net/projects/smoothlife/&quot;&gt;software&lt;/a&gt;.
        
        This version uses smooth time stepping - the timestep can be made smaller without changing 
        the behavior of the rule. Anti-aliasing and a smooth transition function are used to enable 
        the size of the kernel to be as small as possible, for speed. Even so this runs much slower
        than in Stephan's software which uses FFT, so download his and try it there.
        
        This is the first 3D glider that Stephan discovered.
    </description>

    <rule type="kernel" name="SmoothLifeL">
    
      <kernel number_of_chemicals="1" block_size_x="4" block_size_y="1" block_size_z="1">
        // ---------------------------------------------
        __constant float ra = 12.2f;         // outer radius
        __constant float rr = 3.0f;          // ratio of radii
        __constant float b1 = 0.180f;        // birth1
        __constant float b2 = 0.202f;        // birth2
        __constant float s1 = 0.118f;        // survival1
        __constant float s2 = 0.285f;        // survival2
        __constant float alpha_n = 0.028f;   // outer sigmoid
        __constant float alpha_m = 0.140f;   // inner sigmoid
        __constant float dt = 0.101f;        // timestep
        // ---------------------------------------------
        
        // the logistic function is used as a smooth step function
        float4 sigma1(float4 x,float4 a,float alpha) 
        { 
            return 1.0f / ( 1.0f + exp( -(x-a)*4.0f/alpha ) );
        }
        
        float4 sigma2(float4 x,float4 a,float4 b,float alpha)
        {
            return sigma1(x,a,alpha) 
                * ( 1.0f-sigma1(x,b,alpha) );
        }
        
        float4 sigma_m(float x,float y,float4 m,float alpha)
        {
            return x * ( 1.0f-sigma1(m,0.5f,alpha) ) 
                + y * sigma1(m,0.5f,alpha);
        }
        
        // the transition function
        // (n = outer fullness, m = inner fullness)
        float4 s(float4 n,float4 m)
        {
            return sigma2( n, sigma_m(b1,s1,m,alpha_m), 
                sigma_m(b2,s2,m,alpha_m), alpha_n );
        }
        
        // a step function with a linear ramp 
        float ramp_step(float x,float a,float ea)
        {
            return clamp((x-a)/ea + 0.5f,0.0f,1.0f);
        }

        __kernel void rd_compute(__global float4* a_in,
                                 __global float4* a_out) 
        {
            const float rb = ra/rr; // inner radius
            
            // block IDs
            const int bx = get_global_id(0);
            const int by = get_global_id(1);
            const int bz = get_global_id(2);
            const int BX = get_global_size(0);
            const int BY = get_global_size(1);
            const int BZ = get_global_size(2);
            const int i_here = BX*(BY*bz + by) + bx;
            
            // how full are the outer shell and inner sphere?
            float4 outf = 0.0f, inf = 0.0f;
            float volume_out = 0.0f, volume_in = 0.0f;
            float4 val; // (we process 4 floats at once, in 4x1x1 blocks)
            // (if you want a version that processes single floats, see the svn)
            for(int dz=-ra; dz&lt;=ra; dz++)
            {
                for(int dy=-ra; dy&lt;=ra; dy++)
                {
                    for(int dx=-ra; dx&lt;=ra; dx++)
                    {
                        float r = sqrt((float)(dx*dx + dy*dy + dz*dz));
                        // retrieve the float4's we need
                        int shift = (BX+dx)%4; // (avoid taking modulus of negatives)
                        int dbx = (dx-shift)/4;
                        int tx1 = (bx+dbx+BX)   &amp; (BX-1); // wrap
                        int tx2 = (bx+dbx+1+BX) &amp; (BX-1); // wrap
                        int ty =  (by+dy+BY)    &amp; (BY-1); // wrap
                        int tz =  (bz+dz+BZ)    &amp; (BZ-1); // wrap
                        float4 block1 = a_in[ BX*(BY*tz+ty)+tx1 ]; 
                        float4 block2 = a_in[ BX*(BY*tz+ty)+tx2 ]; 
                        // swizzle to get the single float4 we need for this sample
                        switch(shift)
                        {
                            case 0: 
                                val = block1; 
                                break;
                            case 1:
                                val = (float4)(block1.y,block1.z,block1.w,block2.x); 
                                break;
                            case 2:
                                val = (float4)(block1.z,block1.w,block2.x,block2.y); 
                                break;
                            case 3:
                                val = (float4)(block1.w,block2.x,block2.y,block2.z); 
                                break;
                        }
                        // compute the weights:
                        float k_in = ramp_step(-r,-rb,1.0f);
                        float k_out = ramp_step(-r,-ra,1.0f) 
                                    * ramp_step(r,rb,1.0f);
                        // add val, with anti-aliasing:
                        inf  += val * k_in;
                        outf += val * k_out;
                        // also sum the weights:
                        volume_in += k_in;
                        volume_out += k_out;
                    }
                }
            }
            // normalize:
            inf /= volume_in;
            outf /= volume_out;
            
            // smooth time stepping:
            a_out[i_here] = clamp( a_in[i_here] +
                dt * (2.0f*s(outf,inf)-1.0f), 
                0.0f, 1.0f );
        }
      </kernel>
      
    </rule>

    <initial_pattern_generator apply_when_loading="true">
      <overlay chemical="a">
        <overwrite />
        <white_noise low="0" high="0.3" />
        <everywhere />
      </overlay>
      <overlay chemical="a">
        <overwrite />
        <white_noise low="0.9" high="1" />
        <circle radius="0.3"> <point3d x="0.5" y="0.5" z="0.8" /> </circle>
      </overlay>
    </initial_pattern_generator>
    
    <render_settings>
      <color_low r="0" g="0" b="1" />
      <color_high r="1" g="0.5" b="0" />
      <show_color_scale value="true" />
      <show_displacement_mapped_surface value="false" />
      <timesteps_per_render value="1" />
      <slice_3D_axis value="y" />
      <slice_3D_position value="0.5" />
      <contour_level value="0.6" />
    </render_settings>
    
  </RD>
  
  <ImageData WholeExtent="0 31 0 31 0 31" Origin="0 0 0" Spacing="1 1 1">
  <Piece Extent="0 31 0 31 0 31">
    <PointData>
      <DataArray type="Float32" Name="a" format="binary" RangeMin="0" RangeMax="0">
        BAAAAACAAAAAAAAANAAAADQAAAA0AAAANAAAAA==eJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAXic7cEBAQAAAICQ/q/uCAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGIAAAAF4nO3BAQEAAACAkP6v7ggKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiAAAABeJztwQEBAAAAgJD+r+4ICgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYgAAAAQ==
      </DataArray>
    </PointData>
    <CellData>
    </CellData>
  </Piece>
  </ImageData>

</VTKFile>
