<?xml version="1.0"?>
<VTKFile type="ImageData" version="0.1" byte_order="LittleEndian" compressor="vtkZLibDataCompressor">
  <RD format_version="3">
    <description>
Miller and Fredkin&apos;s Salt CA, in 2D.&lt;br&gt;
From: &quot;Circular Motion of Strings in Cellular Automata, and Other Surprises&quot;, Daniel B. Miller and Edward Fredkin&lt;br&gt;
See: &lt;a href=&quot;http://digitalphilosophy.org&quot;&gt;digitalphilosophy.org&lt;/a&gt;

Strands of different lengths can travel forwards at different speeds. Strings with clamped ends can vibrate at different frequencies.
    </description>
    <rule name="Salt_2D" type="kernel">
      <kernel number_of_chemicals="1" block_size_x="1" block_size_y="1" block_size_z="1">
// down: 0 (phase 0) or 1 (phase 1)
// up: 2
bool is_up(int val) { return val==2; }
int parity(int val) { return val%2; }

__kernel void rd_compute(__global float *a_in,__global float *a_out)
{
    const int x = get_global_id(0);
    const int y = get_global_id(1);
    const int X = get_global_size(0);
    const int Y = get_global_size(1);
    const int i_here = X*y + x;

    // We implement the 2D Salt CA as a 3-state CA with a radius-3 Moore neighborhood
    // cells in state 0 or 1 are down - their state determines the current phase
    // cells in state 2 are up - their location determines whether they move in the current phase
    // A more 'pure CA' way of doing this is to have states representing the checkerboard but 
    // this way makes it easier to draw on.

    // The rule is based on 29 points within a 7x7 neighborhood
    int val[29];
    int current_phase = -1;
    {
        const int coords[29][2] = { {0,0},{1,1},{-1,1},{-1,-1},{1,-1}, // 0-5: centre and 4 candidate swap sites
            {2,-1},{2,1},{1,2},{-1,2},{-2,1},{-2,-1},{-1,-2},{1,-2},   // 5-12: activators
            {-2,-3},{0,-3},{2,-3},
            {-3,-2},{3,-2},
            {0,-1},
            {-3,0},{-1,0},{1,0},{3,0},
            {0,1},
            {-3,2},{3,2},
            {-2,3},{0,3},{2,3}}; // 13-28: inhibitors
        int sx,sy;
        for(int i=0;i&lt;29;++i)
        {
            sx = (x + coords[i][0] + X) &amp; (X-1); // wrap (assumes X is a power of 2)
            sy = (y + coords[i][1] + Y) &amp; (Y-1); // wrap (assumes Y is a power of 2)
            val[i] = (int)( a_in[ X*sy + sx ] );
            if( !is_up(val[i]) )
            {
                current_phase = val[i];
            }
        }
    }
    if(current_phase==-1)
    {
        // One rare case: everything in the neighborhood is up. We can safely ignore this case since nothing changes
        a_out[i_here] = val[0];
        return;
    }

    const int swappers[4] = { 1,2,3,4 };
    const int activators[4][2] = { {5,8}, {7,10}, {9,12}, {6,11} };
    const int inhibitors[4][6] = { {18,25,22,27,20,28}, {18,24,19,27,21,26}, 
                                   {16,23,14,19,13,21}, {20,15,14,22,17,23} };

    if( parity(x+y) == parity(current_phase) ) 
    {
        int numSwaps = 0, iSwap;
        for( int i=0; i&lt;4; ++i )
        {
            // if either activator is up then the swap is possible
            // if any inhibitor is up then the swap is forbidden
            if( ( is_up(val[activators[i][0]]) || is_up(val[activators[i][1]]) ) 
                &amp;&amp; !( is_up(val[inhibitors[i][0]]) || is_up(val[inhibitors[i][1]]) || 
                is_up(val[inhibitors[i][2]]) || is_up(val[inhibitors[i][3]]) || 
                is_up(val[inhibitors[i][4]]) || is_up(val[inhibitors[i][5]]) ) )
            {
                ++numSwaps;
                iSwap = i;
            }
        }
        // if exactly one swap is wanted then apply it
        if( numSwaps == 1 )
            a_out[i_here] = val[swappers[iSwap]];
        else
            a_out[i_here] = val[0];
    }
    else
    {
        a_out[i_here] = val[0];
    }
    // down cells swap phase for next time
    if(!is_up(a_out[i_here]))
    {
        a_out[i_here] = 1.0f - a_out[i_here];
    }
}
      </kernel>
      
    </rule>
    <initial_pattern_generator apply_when_loading="false">
      
    </initial_pattern_generator>
    <render_settings>
      <surface_color r="1" g="1" b="1">
        
      </surface_color>
      <color_low r="0.2" g="0.2" b="0.2">
        
      </color_low>
      <color_high r="1" g="1" b="1">
        
      </color_high>
      <show_color_scale value="false">
        
      </show_color_scale>
      <show_multiple_chemicals value="true">
        
      </show_multiple_chemicals>
      <active_chemical value="a">
        
      </active_chemical>
      <low value="1">
        
      </low>
      <high value="2">
        
      </high>
      <vertical_scale_1D value="30">
        
      </vertical_scale_1D>
      <vertical_scale_2D value="15">
        
      </vertical_scale_2D>
      <contour_level value="0.25">
        
      </contour_level>
      <use_wireframe value="false">
        
      </use_wireframe>
      <show_cell_edges value="true">
        
      </show_cell_edges>
      <show_bounding_box value="true">
        
      </show_bounding_box>
      <slice_3D value="true">
        
      </slice_3D>
      <slice_3D_axis value="z">
        
      </slice_3D_axis>
      <slice_3D_position value="0.5">
        
      </slice_3D_position>
      <show_displacement_mapped_surface value="false">
        
      </show_displacement_mapped_surface>
      <color_displacement_mapped_surface value="true">
        
      </color_displacement_mapped_surface>
      <use_image_interpolation value="false">
        
      </use_image_interpolation>
      <timesteps_per_render value="1">
        
      </timesteps_per_render>
      
    </render_settings>
    
  </RD>
  <ImageData WholeExtent="0 127 0 127 0 0" Origin="0 0 0" Spacing="1 1 1">
  <Piece Extent="0 127 0 127 0 0">
    <PointData>
      <DataArray type="Float32" Name="a" format="binary" RangeMin="0" RangeMax="2">
        AgAAAACAAAAAAAAAkgAAALMAAAA=eJzt0TEKw0AMRFEdbe5/qjRJkcJgYivaxe+BS3+GVRUAAAAAAAAAAAAAAAAAAAAAAAAAAMDP8v54ppT7w9NlegAwKtMDWEKmB7CETA9gCZkewBIyPYDTUu71ZKme+3c0gR7ZpAn0yCZNoEc2adIrmzQ5lrr+5lf/P2p2dPmWuu+d7+p8Wnf2+J9MD1jRC0w7CIF4nO3SwW1DMRBDQZXG/qvKOQcjH7AVruSZArgPgtYaLYds/uc+n5HD979F2gFvSjuAl3LprdukHcC10g7gkbQDuFZW5381bp4sG3d3bT+9D/wt7YBN0g44TNoBm6QdcJi0AzZJO+AwaQcwQtoBjJB2ACNk3fEX0g44VNZdb5d2AFCVdgAjpB0AVKUdwAhpBzBC2gEAQF3aAYyQdgAAAAAAAAAAAAAAAAAAAAAA8NsPii4KQQ==
      </DataArray>
    </PointData>
    <CellData>
    </CellData>
  </Piece>
  </ImageData>
</VTKFile>
